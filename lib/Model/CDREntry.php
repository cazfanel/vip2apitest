<?php
/**
 * CDREntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-03-27T11:07:47Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CDREntry Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CDREntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CDREntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'record_name' => 'string',
        'queue_name' => 'string',
        'trunk_name' => 'string',
        'unique_id' => 'string',
        'instance_id' => 'string',
        'id' => 'string',
        'extension_src' => 'string',
        'extension_dst' => 'string',
        'ani' => 'string',
        'dnis' => 'string',
        'clid' => 'string',
        'answer_time' => 'int',
        'dial_time' => 'int',
        'date_created_str' => 'string',
        'date_created' => 'int',
        'date_indexed_str' => 'string',
        'date_indexed' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'record_name' => 'record_name',
        'queue_name' => 'queue_name',
        'trunk_name' => 'trunk_name',
        'unique_id' => 'unique_id',
        'instance_id' => 'instance_id',
        'id' => 'id',
        'extension_src' => 'extension_src',
        'extension_dst' => 'extension_dst',
        'ani' => 'ani',
        'dnis' => 'dnis',
        'clid' => 'clid',
        'answer_time' => 'answer_time',
        'dial_time' => 'dial_time',
        'date_created_str' => 'date_created_str',
        'date_created' => 'date_created',
        'date_indexed_str' => 'date_indexed_str',
        'date_indexed' => 'date_indexed'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'record_name' => 'setRecordName',
        'queue_name' => 'setQueueName',
        'trunk_name' => 'setTrunkName',
        'unique_id' => 'setUniqueId',
        'instance_id' => 'setInstanceId',
        'id' => 'setId',
        'extension_src' => 'setExtensionSrc',
        'extension_dst' => 'setExtensionDst',
        'ani' => 'setAni',
        'dnis' => 'setDnis',
        'clid' => 'setClid',
        'answer_time' => 'setAnswerTime',
        'dial_time' => 'setDialTime',
        'date_created_str' => 'setDateCreatedStr',
        'date_created' => 'setDateCreated',
        'date_indexed_str' => 'setDateIndexedStr',
        'date_indexed' => 'setDateIndexed'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'record_name' => 'getRecordName',
        'queue_name' => 'getQueueName',
        'trunk_name' => 'getTrunkName',
        'unique_id' => 'getUniqueId',
        'instance_id' => 'getInstanceId',
        'id' => 'getId',
        'extension_src' => 'getExtensionSrc',
        'extension_dst' => 'getExtensionDst',
        'ani' => 'getAni',
        'dnis' => 'getDnis',
        'clid' => 'getClid',
        'answer_time' => 'getAnswerTime',
        'dial_time' => 'getDialTime',
        'date_created_str' => 'getDateCreatedStr',
        'date_created' => 'getDateCreated',
        'date_indexed_str' => 'getDateIndexedStr',
        'date_indexed' => 'getDateIndexed'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record_name'] = isset($data['record_name']) ? $data['record_name'] : null;
        $this->container['queue_name'] = isset($data['queue_name']) ? $data['queue_name'] : null;
        $this->container['trunk_name'] = isset($data['trunk_name']) ? $data['trunk_name'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['extension_src'] = isset($data['extension_src']) ? $data['extension_src'] : null;
        $this->container['extension_dst'] = isset($data['extension_dst']) ? $data['extension_dst'] : null;
        $this->container['ani'] = isset($data['ani']) ? $data['ani'] : null;
        $this->container['dnis'] = isset($data['dnis']) ? $data['dnis'] : null;
        $this->container['clid'] = isset($data['clid']) ? $data['clid'] : null;
        $this->container['answer_time'] = isset($data['answer_time']) ? $data['answer_time'] : null;
        $this->container['dial_time'] = isset($data['dial_time']) ? $data['dial_time'] : null;
        $this->container['date_created_str'] = isset($data['date_created_str']) ? $data['date_created_str'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_indexed_str'] = isset($data['date_indexed_str']) ? $data['date_indexed_str'] : null;
        $this->container['date_indexed'] = isset($data['date_indexed']) ? $data['date_indexed'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets record_name
     * @return string
     */
    public function getRecordName()
    {
        return $this->container['record_name'];
    }

    /**
     * Sets record_name
     * @param string $record_name
     * @return $this
     */
    public function setRecordName($record_name)
    {
        $this->container['record_name'] = $record_name;

        return $this;
    }

    /**
     * Gets queue_name
     * @return string
     */
    public function getQueueName()
    {
        return $this->container['queue_name'];
    }

    /**
     * Sets queue_name
     * @param string $queue_name
     * @return $this
     */
    public function setQueueName($queue_name)
    {
        $this->container['queue_name'] = $queue_name;

        return $this;
    }

    /**
     * Gets trunk_name
     * @return string
     */
    public function getTrunkName()
    {
        return $this->container['trunk_name'];
    }

    /**
     * Sets trunk_name
     * @param string $trunk_name
     * @return $this
     */
    public function setTrunkName($trunk_name)
    {
        $this->container['trunk_name'] = $trunk_name;

        return $this;
    }

    /**
     * Gets unique_id
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     * @param string $unique_id
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets instance_id
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     * @param string $instance_id
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets extension_src
     * @return string
     */
    public function getExtensionSrc()
    {
        return $this->container['extension_src'];
    }

    /**
     * Sets extension_src
     * @param string $extension_src
     * @return $this
     */
    public function setExtensionSrc($extension_src)
    {
        $this->container['extension_src'] = $extension_src;

        return $this;
    }

    /**
     * Gets extension_dst
     * @return string
     */
    public function getExtensionDst()
    {
        return $this->container['extension_dst'];
    }

    /**
     * Sets extension_dst
     * @param string $extension_dst
     * @return $this
     */
    public function setExtensionDst($extension_dst)
    {
        $this->container['extension_dst'] = $extension_dst;

        return $this;
    }

    /**
     * Gets ani
     * @return string
     */
    public function getAni()
    {
        return $this->container['ani'];
    }

    /**
     * Sets ani
     * @param string $ani
     * @return $this
     */
    public function setAni($ani)
    {
        $this->container['ani'] = $ani;

        return $this;
    }

    /**
     * Gets dnis
     * @return string
     */
    public function getDnis()
    {
        return $this->container['dnis'];
    }

    /**
     * Sets dnis
     * @param string $dnis
     * @return $this
     */
    public function setDnis($dnis)
    {
        $this->container['dnis'] = $dnis;

        return $this;
    }

    /**
     * Gets clid
     * @return string
     */
    public function getClid()
    {
        return $this->container['clid'];
    }

    /**
     * Sets clid
     * @param string $clid
     * @return $this
     */
    public function setClid($clid)
    {
        $this->container['clid'] = $clid;

        return $this;
    }

    /**
     * Gets answer_time
     * @return int
     */
    public function getAnswerTime()
    {
        return $this->container['answer_time'];
    }

    /**
     * Sets answer_time
     * @param int $answer_time
     * @return $this
     */
    public function setAnswerTime($answer_time)
    {
        $this->container['answer_time'] = $answer_time;

        return $this;
    }

    /**
     * Gets dial_time
     * @return int
     */
    public function getDialTime()
    {
        return $this->container['dial_time'];
    }

    /**
     * Sets dial_time
     * @param int $dial_time
     * @return $this
     */
    public function setDialTime($dial_time)
    {
        $this->container['dial_time'] = $dial_time;

        return $this;
    }

    /**
     * Gets date_created_str
     * @return string
     */
    public function getDateCreatedStr()
    {
        return $this->container['date_created_str'];
    }

    /**
     * Sets date_created_str
     * @param string $date_created_str
     * @return $this
     */
    public function setDateCreatedStr($date_created_str)
    {
        $this->container['date_created_str'] = $date_created_str;

        return $this;
    }

    /**
     * Gets date_created
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param int $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_indexed_str
     * @return string
     */
    public function getDateIndexedStr()
    {
        return $this->container['date_indexed_str'];
    }

    /**
     * Sets date_indexed_str
     * @param string $date_indexed_str
     * @return $this
     */
    public function setDateIndexedStr($date_indexed_str)
    {
        $this->container['date_indexed_str'] = $date_indexed_str;

        return $this;
    }

    /**
     * Gets date_indexed
     * @return int
     */
    public function getDateIndexed()
    {
        return $this->container['date_indexed'];
    }

    /**
     * Sets date_indexed
     * @param int $date_indexed
     * @return $this
     */
    public function setDateIndexed($date_indexed)
    {
        $this->container['date_indexed'] = $date_indexed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


